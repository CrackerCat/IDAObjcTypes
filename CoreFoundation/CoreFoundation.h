#import "../Types.h"
#import "Types.h"

double CFStringGetDoubleValue(CFStringRef str);
double _imp__CFStringGetDoubleValue(CFStringRef str);

bool CFUniCharIsMemberOf(UTF32Char theChar, uint32_t charset);
bool _imp__CFUniCharIsMemberOf(UTF32Char theChar, uint32_t charset);

SInt32 CFStringGetIntValue(CFStringRef str);
SInt32 _imp__CFStringGetIntValue(CFStringRef str);
SInt32 CFURLGetPortNumber(CFURLRef anURL);
SInt32 _imp__CFURLGetPortNumber(CFURLRef anURL);

const char* CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding);
const char* _imp__CFStringGetCStringPtr(CFStringRef theString, CFStringEncoding encoding);
const void* CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx);
const void* _imp__CFArrayGetValueAtIndex(CFArrayRef theArray, CFIndex idx);
const void* CFDictionaryGetValue(CFDictionaryRef theDict, const void* key);
const void* _imp__CFDictionaryGetValue(CFDictionaryRef theDict, const void* key);
const void* CFSetGetValue(CFSetRef theSet, const void* value);
const void* _imp__CFSetGetValue(CFSetRef theSet, const void* value);
void* CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
void* _imp__CFAllocatorAllocate(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
void* CFAllocatorReallocate(CFAllocatorRef allocator, void* ptr, CFIndex newsize, CFOptionFlags hint);
void* _imp__CFAllocatorReallocate(CFAllocatorRef allocator, void* ptr, CFIndex newsize, CFOptionFlags hint);
void* CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName);
void* _imp__CFBundleGetFunctionPointerForName(CFBundleRef bundle, CFStringRef functionName);

const UniChar* CFStringGetCharactersPtr(CFStringRef theString);
const UniChar* _imp__CFStringGetCharactersPtr(CFStringRef theString);
UniChar CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);
UniChar _imp__CFStringGetCharacterAtIndex(CFStringRef theString, CFIndex idx);
UniChar CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer* buf, CFIndex idx);
UniChar _imp__CFStringGetCharacterFromInlineBuffer(CFStringInlineBuffer* buf, CFIndex idx);

const UInt8* CFDataGetBytePtr(CFDataRef theData);
const UInt8* _imp__CFDataGetBytePtr(CFDataRef theData);
const UInt8* CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex* numBytesRead);
const UInt8* _imp__CFReadStreamGetBuffer(CFReadStreamRef stream, CFIndex maxBytesToRead, CFIndex* numBytesRead);
UInt8* CFDataGetMutableBytePtr(CFMutableDataRef theData);
UInt8* _imp__CFDataGetMutableBytePtr(CFMutableDataRef theData);

void CFLog(int32_t level, CFStringRef format, ...);
void _imp__CFLog(int32_t level, CFStringRef format, ...);
void CFShow(CFTypeRef obj);
void _imp__CFShow(CFTypeRef obj);
void CFRelease(CFTypeRef cf);
void _imp__CFRelease(CFTypeRef cf);
void CFArrayAppendValue(CFMutableArrayRef mDict, const void* value);
void _imp__CFArrayAppendValue(CFMutableArrayRef mDict, const void* value);
void CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange);
void _imp__CFArrayAppendArray(CFMutableArrayRef theArray, CFArrayRef otherArray, CFRange otherRange);
void CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx);
void _imp__CFArrayRemoveValueAtIndex(CFMutableArrayRef theArray, CFIndex idx);
void CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void** newValues, CFIndex newCount);
void _imp__CFArrayReplaceValues(CFMutableArrayRef theArray, CFRange range, const void** newValues, CFIndex newCount);
void CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void* value);
void _imp__CFArrayInsertValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void* value);
void CFArrayGetValues(CFArrayRef theArray, CFRange range, const void** values);
void _imp__CFArrayGetValues(CFArrayRef theArray, CFRange range, const void** values);
void CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void* value);
void _imp__CFArraySetValueAtIndex(CFMutableArrayRef theArray, CFIndex idx, const void* value);
void CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void* context);
void _imp__CFArraySortValues(CFMutableArrayRef theArray, CFRange range, CFComparatorFunction comparator, void* context);
void CFArrayRemoveAllValues(CFMutableArrayRef theArray);
void _imp__CFArrayRemoveAllValues(CFMutableArrayRef theArray);
void CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void* context);
void _imp__CFArrayApplyFunction(CFArrayRef theArray, CFRange range, CFArrayApplierFunction applier, void* context);
void CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
void _imp__CFPreferencesSetValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
void CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID);
void _imp__CFPreferencesSetAppValue(CFStringRef key, CFPropertyListRef value, CFStringRef applicationID);
void CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
void _imp__CFPreferencesSetMultiple(CFDictionaryRef keysToSet, CFArrayRef keysToRemove, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
void CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID);
void _imp__CFPreferencesAddSuitePreferencesToApp(CFStringRef applicationID, CFStringRef suiteID);
void CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef applicationID, CFStringRef suiteID);
void _imp__CFPreferencesRemoveSuitePreferencesFromApp(CFStringRef applicationID, CFStringRef suiteID);
void CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void* observer, CFNotificationCallback callBack, CFStringRef name, const void* object, CFNotificationSuspensionBehavior suspensionBehavior);
void _imp__CFNotificationCenterAddObserver(CFNotificationCenterRef center, const void* observer, CFNotificationCallback callBack, CFStringRef name, const void* object, CFNotificationSuspensionBehavior suspensionBehavior);
void CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void* object, CFDictionaryRef userInfo, Boolean deliverImmediately);
void _imp__CFNotificationCenterPostNotification(CFNotificationCenterRef center, CFNotificationName name, const void* object, CFDictionaryRef userInfo, Boolean deliverImmediately);
void CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void* observer, CFNotificationName name, const void* object);
void _imp__CFNotificationCenterRemoveObserver(CFNotificationCenterRef center, const void* observer, CFNotificationName name, const void* object);
void CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
void _imp__CFCharacterSetAddCharactersInRange(CFMutableCharacterSetRef theSet, CFRange theRange);
void CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
void _imp__CFCharacterSetAddCharactersInString(CFMutableCharacterSetRef theSet, CFStringRef theString);
void CFCharacterSetIntersect(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
void _imp__CFCharacterSetIntersect(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
void CFCharacterSetInvert(CFMutableCharacterSetRef theSet);
void _imp__CFCharacterSetInvert(CFMutableCharacterSetRef theSet);
void CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
void _imp__CFCharacterSetUnion(CFMutableCharacterSetRef theSet, CFCharacterSetRef theOtherSet);
void CFCharacterSetCompact(CFMutableCharacterSetRef theSet);
void _imp__CFCharacterSetCompact(CFMutableCharacterSetRef theSet);
void CFCharacterSetInitInlineBuffer(CFCharacterSetRef cset, CFCharacterSetInlineBuffer* buffer);
void _imp__CFCharacterSetInitInlineBuffer(CFCharacterSetRef cset, CFCharacterSetInlineBuffer* buffer);
void CFDataAppendBytes(CFMutableDataRef theData, const UInt8* bytes, CFIndex length);
void _imp__CFDataAppendBytes(CFMutableDataRef theData, const UInt8* bytes, CFIndex length);
void CFDataDeleteBytes(CFMutableDataRef theData, CFRange range);
void _imp__CFDataDeleteBytes(CFMutableDataRef theData, CFRange range);
void CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8* newBytes, CFIndex newLength);
void _imp__CFDataReplaceBytes(CFMutableDataRef theData, CFRange range, const UInt8* newBytes, CFIndex newLength);
void CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength);
void _imp__CFDataIncreaseLength(CFMutableDataRef theData, CFIndex extraLength);
void CFDataSetLength(CFMutableDataRef theData, CFIndex length);
void _imp__CFDataSetLength(CFMutableDataRef theData, CFIndex length);
void CFDataGetBytes(CFDataRef theData, CFRange range, UInt8* buffer);
void _imp__CFDataGetBytes(CFDataRef theData, CFRange range, UInt8* buffer);
void CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void** keys, const void** values);
void _imp__CFDictionaryGetKeysAndValues(CFDictionaryRef theDict, const void** keys, const void** values);
void CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void* context);
void _imp__CFDictionaryApplyFunction(CFDictionaryRef theDict, CFDictionaryApplierFunction applier, void* context);
void CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void* key);
void _imp__CFDictionaryRemoveValue(CFMutableDictionaryRef theDict, const void* key);
void CFDictionarySetValue(CFMutableDictionaryRef theDict, const void* key, const void* value);
void _imp__CFDictionarySetValue(CFMutableDictionaryRef theDict, const void* key, const void* value);
void CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void* key, const void* value);
void _imp__CFDictionaryAddValue(CFMutableDictionaryRef theDict, const void* key, const void* value);
void CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict);
void _imp__CFDictionaryRemoveAllValues(CFMutableDictionaryRef theDict);
void CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void* key, const void* value);
void _imp__CFDictionaryReplaceValue(CFMutableDictionaryRef theDict, const void* key, const void* value);
void CFStringGetLineBounds(CFStringRef theString, CFRange range, CFIndex* lineBeginIndex, CFIndex* lineEndIndex, CFIndex* contentsEndIndex);
void _imp__CFStringGetLineBounds(CFStringRef theString, CFRange range, CFIndex* lineBeginIndex, CFIndex* lineEndIndex, CFIndex* contentsEndIndex);
void CFStringDelete(CFMutableStringRef theString, CFRange range);
void _imp__CFStringDelete(CFMutableStringRef theString, CFRange range);
void CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale);
void _imp__CFStringFold(CFMutableStringRef theString, CFStringCompareFlags theFlags, CFLocaleRef theLocale);
void CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm);
void _imp__CFStringNormalize(CFMutableStringRef theString, CFStringNormalizationForm theForm);
void CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale);
void _imp__CFStringCapitalize(CFMutableStringRef theString, CFLocaleRef locale);
void CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale);
void _imp__CFStringUppercase(CFMutableStringRef theString, CFLocaleRef locale);
void CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale);
void _imp__CFStringLowercase(CFMutableStringRef theString, CFLocaleRef locale);
void CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr);
void _imp__CFStringInsert(CFMutableStringRef str, CFIndex idx, CFStringRef insertedStr);
void CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString);
void _imp__CFStringAppend(CFMutableStringRef theString, CFStringRef appendedString);
void CFStringAppendCharacters(CFMutableStringRef theString, const UniChar* chars, CFIndex numChars);
void _imp__CFStringAppendCharacters(CFMutableStringRef theString, const UniChar* chars, CFIndex numChars);
void CFStringAppendCString(CFMutableStringRef theString, const char* cStr, CFStringEncoding encoding);
void _imp__CFStringAppendCString(CFMutableStringRef theString, const char* cStr, CFStringEncoding encoding);
void CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...);
void _imp__CFStringAppendFormat(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, ...);
void CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);
void _imp__CFStringAppendFormatAndArguments(CFMutableStringRef theString, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);
void CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad);
void _imp__CFStringPad(CFMutableStringRef theString, CFStringRef padString, CFIndex length, CFIndex indexIntoPad);
void CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement);
void _imp__CFStringReplace(CFMutableStringRef theString, CFRange range, CFStringRef replacement);
void CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement);
void _imp__CFStringReplaceAll(CFMutableStringRef theString, CFStringRef replacement);
void CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar* chars, CFIndex length, CFIndex capacity);
void _imp__CFStringSetExternalCharactersNoCopy(CFMutableStringRef theString, UniChar* chars, CFIndex length, CFIndex capacity);
void CFStringTrim(CFMutableStringRef theString, CFStringRef trimString);
void _imp__CFStringTrim(CFMutableStringRef theString, CFStringRef trimString);
void CFStringTrimWhitespace(CFMutableStringRef theString);
void _imp__CFStringTrimWhitespace(CFMutableStringRef theString);
void CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar* buffer);
void _imp__CFStringGetCharacters(CFStringRef theString, CFRange range, UniChar* buffer);
void CFStringInitInlineBuffer(CFStringRef str, CFStringInlineBuffer* buf, CFRange range);
void _imp__CFStringInitInlineBuffer(CFStringRef str, CFStringInlineBuffer* buf, CFRange range);
void CFStringGetParagraphBounds(CFStringRef string, CFRange range, CFIndex* parBeginIndex, CFIndex* parEndIndex, CFIndex* contentsEndIndex);
void _imp__CFStringGetParagraphBounds(CFStringRef string, CFRange range, CFIndex* parBeginIndex, CFIndex* parEndIndex, CFIndex* contentsEndIndex);
void CFSetAddValue(CFMutableSetRef theSet, const void* value);
void _imp__CFSetAddValue(CFMutableSetRef theSet, const void* value);
void CFSetSetValue(CFMutableSetRef theSet, const void* value);
void _imp__CFSetSetValue(CFMutableSetRef theSet, const void* value);
void CFSetReplaceValue(CFMutableSetRef theSet, const void* value);
void _imp__CFSetReplaceValue(CFMutableSetRef theSet, const void* value);
void CFSetRemoveValue(CFMutableSetRef theSet, const void* value);
void _imp__CFSetRemoveValue(CFMutableSetRef theSet, const void* value);
void CFSetRemoveAllValues(CFMutableSetRef theSet);
void _imp__CFSetRemoveAllValues(CFMutableSetRef theSet);
void CFSetGetValues(CFSetRef theSet, const void** values);
void _imp__CFSetGetValues(CFSetRef theSet, const void** values);
void CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void* context);
void _imp__CFSetApplyFunction(CFSetRef theSet, CFSetApplierFunction applier, void* context);
void CFAllocatorSetDefault(CFAllocatorRef allocator);
void _imp__CFAllocatorSetDefault(CFAllocatorRef allocator);
void CFAllocatorDeallocate(CFAllocatorRef allocator, void* ptr);
void _imp__CFAllocatorDeallocate(CFAllocatorRef allocator, void* ptr);
void CFReadStreamClose(CFReadStreamRef stream);
void _imp__CFReadStreamClose(CFReadStreamRef stream);
void CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
void _imp__CFReadStreamScheduleWithRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
void CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
void _imp__CFReadStreamUnscheduleFromRunLoop(CFReadStreamRef stream, CFRunLoopRef runLoop, CFRunLoopMode runLoopMode);
void CFWriteStreamClose(CFWriteStreamRef stream);
void _imp__CFWriteStreamClose(CFWriteStreamRef stream);
void CFBundleCloseBundleResourceMap(CFBundleRef bundle, CFBundleRefNum refNum);
void _imp__CFBundleCloseBundleResourceMap(CFBundleRef bundle, CFBundleRefNum refNum);

void _CFNonObjCRelease(CFTypeRef cf);
void _imp___CFNonObjCRelease(CFTypeRef cf);
void _CFRuntimeBridgeClasses(CFTypeID cfType, const char* className);
void _imp___CFRuntimeBridgeClasses(CFTypeID cfType, const char* className);

CFTypeRef CFRetain(CFTypeRef cf);
CFTypeRef _imp__CFRetain(CFTypeRef cf);
CFTypeRef CFAutorelease(CFTypeRef arg);
CFTypeRef _imp__CFAutorelease(CFTypeRef arg);
CFTypeRef CFDictionaryGetValue(CFDictionaryRef theDict, const void* key);
CFTypeRef _imp__CFDictionaryGetValue(CFDictionaryRef theDict, const void* key);
CFTypeRef CFMakeCollectable(CFTypeRef cf);
CFTypeRef _imp__CFMakeCollectable(CFTypeRef cf);
CFTypeRef CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName);
CFTypeRef _imp__CFReadStreamCopyProperty(CFReadStreamRef stream, CFStreamPropertyKey propertyName);

CFTypeRef _CFRuntimeCreateInstance(CFAllocatorRef allocator, CFTypeID typeID, CFIndex extraBytes, unsigned char* category);
CFTypeRef _imp___CFRuntimeCreateInstance(CFAllocatorRef allocator, CFTypeID typeID, CFIndex extraBytes, unsigned char* category);
CFTypeRef _CFTryRetain(CFTypeRef);
CFTypeRef _imp___CFTryRetain(CFTypeRef);
CFTypeRef _CFNonObjCRetain(CFTypeRef cf);
CFTypeRef _imp___CFNonObjCRetain(CFTypeRef cf);

CFTypeID CFGetTypeID(CFTypeRef cf);
CFTypeID _imp__CFGetTypeID(CFTypeRef cf);
CFTypeID CFBooleanGetTypeID(void);
CFTypeID _imp__CFBooleanGetTypeID(void);
CFTypeID CFDictionaryGetTypeID(void);
CFTypeID _imp__CFDictionaryGetTypeID(void);
CFTypeID CFArrayGetTypeID(void);
CFTypeID _imp__CFArrayGetTypeID(void);
CFTypeID CFCharacterSetGetTypeID(void);
CFTypeID _imp__CFCharacterSetGetTypeID(void);
CFTypeID CFDataGetTypeID(void);
CFTypeID _imp__CFDataGetTypeID(void);
CFTypeID CFStringGetTypeID(void);
CFTypeID _imp__CFStringGetTypeID(void);
CFTypeID CFNumberGetTypeID(void);
CFTypeID _imp__CFNumberGetTypeID(void);
CFTypeID CFSetGetTypeID(void);
CFTypeID _imp__CFSetGetTypeID(void);
CFTypeID CFURLGetTypeID(void);
CFTypeID _imp__CFURLGetTypeID(void);
CFTypeID CFNotificationCenterGetTypeID(void);
CFTypeID _imp__CFNotificationCenterGetTypeID(void);
CFTypeID CFAllocatorGetTypeID(void);
CFTypeID _imp__CFAllocatorGetTypeID(void);
CFTypeID CFNullGetTypeID(void);
CFTypeID _imp__CFNullGetTypeID(void);

CFTypeID _CFRuntimeRegisterClass(const CFRuntimeClass* const cls);
CFTypeID _imp___CFRuntimeRegisterClass(const CFRuntimeClass* const cls);

CFHashCode CFHash(CFTypeRef cf);
CFHashCode _imp__CFHash(CFTypeRef cf);

CFHashCode _CFNonObjCHash(CFTypeRef cf);
CFHashCode _imp___CFNonObjCHash(CFTypeRef cf);

CFRunLoopRunResult CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled);
CFRunLoopRunResult _imp__CFRunLoopRunInMode(CFRunLoopMode mode, CFTimeInterval seconds, Boolean returnAfterSourceHandled);

CFStringEncoding CFStringGetSystemEncoding(void);
CFStringEncoding _imp__CFStringGetSystemEncoding(void);
CFStringEncoding CFStringConvertNSStringEncodingToEncoding(unsigned long encoding);
CFStringEncoding _imp__CFStringConvertNSStringEncodingToEncoding(unsigned long encoding);

CFComparisonResult CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
CFComparisonResult _imp__CFStringCompare(CFStringRef theString1, CFStringRef theString2, CFStringCompareFlags compareOptions);
CFComparisonResult CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions);
CFComparisonResult _imp__CFStringCompareWithOptions(CFStringRef theString1, CFStringRef theString2, CFRange rangeToCompare, CFStringCompareFlags compareOptions);
CFComparisonResult CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void* context);
CFComparisonResult _imp__CFNumberCompare(CFNumberRef number, CFNumberRef otherNumber, void* context);

CFUUIDRef CFUUIDCreate(CFAllocatorRef alloc);
CFUUIDRef _imp__CFUUIDCreate(CFAllocatorRef alloc);
CFUUIDRef CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr);
CFUUIDRef _imp__CFUUIDCreateFromString(CFAllocatorRef alloc, CFStringRef uuidStr);
CFUUIDRef CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes);
CFUUIDRef _imp__CFUUIDCreateFromUUIDBytes(CFAllocatorRef alloc, CFUUIDBytes bytes);
CFUUIDRef CFUUIDCreateWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);
CFUUIDRef _imp__CFUUIDCreateWithBytes(CFAllocatorRef alloc, UInt8 byte0, UInt8 byte1, UInt8 byte2, UInt8 byte3, UInt8 byte4, UInt8 byte5, UInt8 byte6, UInt8 byte7, UInt8 byte8, UInt8 byte9, UInt8 byte10, UInt8 byte11, UInt8 byte12, UInt8 byte13, UInt8 byte14, UInt8 byte15);

CFRange CFDataFind(CFDataRef theData, CFDataRef dataToFind, CFRange searchRange, CFDataSearchFlags compareOptions);
CFRange _imp__CFDataFind(CFDataRef theData, CFDataRef dataToFind, CFRange searchRange, CFDataSearchFlags compareOptions);
CFRange CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions);
CFRange _imp__CFStringFind(CFStringRef theString, CFStringRef stringToFind, CFStringCompareFlags compareOptions);
CFRange CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex);
CFRange _imp__CFStringGetRangeOfComposedCharactersAtIndex(CFStringRef theString, CFIndex theIndex);
CFRange CFStringGetRangeOfCharacterClusterAtIndex(CFStringRef string, CFIndex charIndex, CFStringCharacterClusterType type);
CFRange _imp__CFStringGetRangeOfCharacterClusterAtIndex(CFStringRef string, CFIndex charIndex, CFStringCharacterClusterType type);
CFRange CFURLGetByteRangeForComponent(CFURLRef url, CFURLComponentType component, CFRange* rangeIncludingSeparators);
CFRange _imp__CFURLGetByteRangeForComponent(CFURLRef url, CFURLComponentType component, CFRange* rangeIncludingSeparators);

CFAllocatorRef CFAllocatorGetDefault(void);
CFAllocatorRef _imp__CFAllocatorGetDefault(void);
CFAllocatorRef CFGetAllocator(CFTypeRef cf);
CFAllocatorRef _imp__CFGetAllocator(CFTypeRef cf);
CFAllocatorRef CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext* context);
CFAllocatorRef _imp__CFAllocatorCreate(CFAllocatorRef allocator, CFAllocatorContext* context);

CFErrorRef CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo);
CFErrorRef _imp__CFErrorCreate(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, CFDictionaryRef userInfo);
CFErrorRef CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void* const* userInfoKeys, const void* const* userInfoValues, CFIndex numUserInfoValues);
CFErrorRef _imp__CFErrorCreateWithUserInfoKeysAndValues(CFAllocatorRef allocator, CFErrorDomain domain, CFIndex code, const void* const* userInfoKeys, const void* const* userInfoValues, CFIndex numUserInfoValues);
CFErrorRef CFReadStreamCopyError(CFReadStreamRef stream);
CFErrorRef _imp__CFReadStreamCopyError(CFReadStreamRef stream);

CFStreamStatus CFReadStreamGetStatus(CFReadStreamRef stream);
CFStreamStatus _imp__CFReadStreamGetStatus(CFReadStreamRef stream);

CFNumberRef CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void* valuePtr);
CFNumberRef _imp__CFNumberCreate(CFAllocatorRef allocator, CFNumberType theType, const void* valuePtr);

CFNumberType CFNumberGetType(CFNumberRef number);
CFNumberType _imp__CFNumberGetType(CFNumberRef number);

CFURLRef CFURLCopyAbsoluteURL(CFURLRef relativeURL);
CFURLRef _imp__CFURLCopyAbsoluteURL(CFURLRef relativeURL);
CFURLRef CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8* relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode);
CFURLRef _imp__CFURLCreateAbsoluteURLWithBytes(CFAllocatorRef alloc, const UInt8* relativeURLBytes, CFIndex length, CFStringEncoding encoding, CFURLRef baseURL, Boolean useCompatibilityMode);
CFURLRef CFURLCreateByResolvingBookmarkData(CFAllocatorRef allocator, CFDataRef bookmark, CFURLBookmarkResolutionOptions options, CFURLRef relativeToURL, CFArrayRef resourcePropertiesToInclude, Boolean* isStale, CFErrorRef* error);
CFURLRef _imp__CFURLCreateByResolvingBookmarkData(CFAllocatorRef allocator, CFDataRef bookmark, CFURLBookmarkResolutionOptions options, CFURLRef relativeToURL, CFArrayRef resourcePropertiesToInclude, Boolean* isStale, CFErrorRef* error);
CFURLRef CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
CFURLRef _imp__CFURLCreateCopyAppendingPathComponent(CFAllocatorRef allocator, CFURLRef url, CFStringRef pathComponent, Boolean isDirectory);
CFURLRef CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension);
CFURLRef _imp__CFURLCreateCopyAppendingPathExtension(CFAllocatorRef allocator, CFURLRef url, CFStringRef extension);
CFURLRef CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url);
CFURLRef _imp__CFURLCreateCopyDeletingLastPathComponent(CFAllocatorRef allocator, CFURLRef url);
CFURLRef CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url);
CFURLRef _imp__CFURLCreateCopyDeletingPathExtension(CFAllocatorRef allocator, CFURLRef url);
CFURLRef CFURLCreateFilePathURL(CFAllocatorRef allocator, CFURLRef url, CFErrorRef* error);
CFURLRef _imp__CFURLCreateFilePathURL(CFAllocatorRef allocator, CFURLRef url, CFErrorRef* error);
CFURLRef CFURLCreateFileReferenceURL(CFAllocatorRef allocator, CFURLRef url, CFErrorRef* error);
CFURLRef _imp__CFURLCreateFileReferenceURL(CFAllocatorRef allocator, CFURLRef url, CFErrorRef* error);
CFURLRef CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8* buffer, CFIndex bufLen, Boolean isDirectory);
CFURLRef _imp__CFURLCreateFromFileSystemRepresentation(CFAllocatorRef allocator, const UInt8* buffer, CFIndex bufLen, Boolean isDirectory);
CFURLRef CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8* buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL);
CFURLRef _imp__CFURLCreateFromFileSystemRepresentationRelativeToBase(CFAllocatorRef allocator, const UInt8* buffer, CFIndex bufLen, Boolean isDirectory, CFURLRef baseURL);
CFURLRef CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL);
CFURLRef _imp__CFURLCreateWithString(CFAllocatorRef allocator, CFStringRef URLString, CFURLRef baseURL);

CFDataRef CFDataCreate(CFAllocatorRef allocator, const UInt8* bytes, CFIndex length);
CFDataRef _imp__CFDataCreate(CFAllocatorRef allocator, const UInt8* bytes, CFIndex length);
CFDataRef CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData);
CFDataRef _imp__CFDataCreateCopy(CFAllocatorRef allocator, CFDataRef theData);
CFDataRef CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8* bytes, CFIndex length, CFAllocatorRef bytesDeallocator);
CFDataRef _imp__CFDataCreateWithBytesNoCopy(CFAllocatorRef allocator, const UInt8* bytes, CFIndex length, CFAllocatorRef bytesDeallocator);
CFDataRef CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef* error);
CFDataRef _imp__CFPropertyListCreateData(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef* error);
CFDataRef CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet);
CFDataRef _imp__CFCharacterSetCreateBitmapRepresentation(CFAllocatorRef alloc, CFCharacterSetRef theSet);
CFDataRef CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte);
CFDataRef _imp__CFStringCreateExternalRepresentation(CFAllocatorRef alloc, CFStringRef theString, CFStringEncoding encoding, UInt8 lossByte);
CFDataRef CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace);
CFDataRef _imp__CFURLCreateData(CFAllocatorRef allocator, CFURLRef url, CFStringEncoding encoding, Boolean escapeWhitespace);

CFMutableDataRef CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity);
CFMutableDataRef _imp__CFDataCreateMutable(CFAllocatorRef allocator, CFIndex capacity);
CFMutableDataRef CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData);
CFMutableDataRef _imp__CFDataCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDataRef theData);

CFMutableCharacterSetRef CFCharacterSetCreateMutable(CFAllocatorRef alloc);
CFMutableCharacterSetRef _imp__CFCharacterSetCreateMutable(CFAllocatorRef alloc);
CFMutableCharacterSetRef CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);
CFMutableCharacterSetRef _imp__CFCharacterSetCreateMutableCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);

CFCharacterSetRef CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);
CFCharacterSetRef _imp__CFCharacterSetCreateCopy(CFAllocatorRef alloc, CFCharacterSetRef theSet);
CFCharacterSetRef CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet);
CFCharacterSetRef _imp__CFCharacterSetCreateInvertedSet(CFAllocatorRef alloc, CFCharacterSetRef theSet);
CFCharacterSetRef CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange);
CFCharacterSetRef _imp__CFCharacterSetCreateWithCharactersInRange(CFAllocatorRef alloc, CFRange theRange);
CFCharacterSetRef CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString);
CFCharacterSetRef _imp__CFCharacterSetCreateWithCharactersInString(CFAllocatorRef alloc, CFStringRef theString);
CFCharacterSetRef CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData);
CFCharacterSetRef _imp__CFCharacterSetCreateWithBitmapRepresentation(CFAllocatorRef alloc, CFDataRef theData);
CFCharacterSetRef CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier);
CFCharacterSetRef _imp__CFCharacterSetGetPredefined(CFCharacterSetPredefinedSet theSetIdentifier);

CFMutableSetRef CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks* callBacks);
CFMutableSetRef _imp__CFSetCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFSetCallBacks* callBacks);
CFMutableSetRef CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet);
CFMutableSetRef _imp__CFSetCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFSetRef theSet);

CFSetRef CFSetCreate(CFAllocatorRef allocator, const void** values, CFIndex numValues, const CFSetCallBacks* callBacks);
CFSetRef _imp__CFSetCreate(CFAllocatorRef allocator, const void** values, CFIndex numValues, const CFSetCallBacks* callBacks);

CFAbsoluteTime CFAbsoluteTimeGetCurrent(void);
CFAbsoluteTime _imp__CFAbsoluteTimeGetCurrent(void);

CFNotificationCenterRef CFNotificationCenterGetDarwinNotifyCenter(void);
CFNotificationCenterRef _imp__CFNotificationCenterGetDarwinNotifyCenter(void);
CFNotificationCenterRef CFNotificationCenterGetLocalCenter(void);
CFNotificationCenterRef _imp__CFNotificationCenterGetLocalCenter(void);

CFPropertyListRef CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
CFPropertyListRef _imp__CFPreferencesCopyValue(CFStringRef key, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
CFPropertyListRef CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID);
CFPropertyListRef _imp__CFPreferencesCopyAppValue(CFStringRef key, CFStringRef applicationID);
CFPropertyListRef CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption);
CFPropertyListRef _imp__CFPropertyListCreateDeepCopy(CFAllocatorRef allocator, CFPropertyListRef propertyList, CFOptionFlags mutabilityOption);
CFPropertyListRef CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat* format, CFErrorRef* error);
CFPropertyListRef _imp__CFPropertyListCreateWithData(CFAllocatorRef allocator, CFDataRef data, CFOptionFlags options, CFPropertyListFormat* format, CFErrorRef* error);
CFPropertyListRef CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat* format, CFErrorRef* error);
CFPropertyListRef _imp__CFPropertyListCreateWithStream(CFAllocatorRef allocator, CFReadStreamRef stream, CFIndex streamLength, CFOptionFlags options, CFPropertyListFormat* format, CFErrorRef* error);

CFReadStreamRef CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
CFReadStreamRef _imp__CFReadStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
CFReadStreamRef CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8* bytes, CFIndex length, CFAllocatorRef bytesDeallocator);
CFReadStreamRef _imp__CFReadStreamCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8* bytes, CFIndex length, CFAllocatorRef bytesDeallocator);

CFWriteStreamRef CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
CFWriteStreamRef _imp__CFWriteStreamCreateWithFile(CFAllocatorRef alloc, CFURLRef fileURL);
CFWriteStreamRef CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc, UInt8* buffer, CFIndex bufferCapacity);
CFWriteStreamRef _imp__CFWriteStreamCreateWithBuffer(CFAllocatorRef alloc, UInt8* buffer, CFIndex bufferCapacity);
CFWriteStreamRef CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator);
CFWriteStreamRef _imp__CFWriteStreamCreateWithAllocatedBuffers(CFAllocatorRef alloc, CFAllocatorRef bufferAllocator);

CFDictionaryRef CFDictionaryCreate(CFAllocatorRef allocator, const void** keys, const void** values, CFIndex numValues, const CFDictionaryKeyCallBacks* keyCallBacks, const CFDictionaryValueCallBacks* valueCallBacks);
CFDictionaryRef _imp__CFDictionaryCreate(CFAllocatorRef allocator, const void** keys, const void** values, CFIndex numValues, const CFDictionaryKeyCallBacks* keyCallBacks, const CFDictionaryValueCallBacks* valueCallBacks);
CFDictionaryRef CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict);
CFDictionaryRef _imp__CFDictionaryCreateCopy(CFAllocatorRef allocator, CFDictionaryRef theDict);
CFDictionaryRef CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
CFDictionaryRef _imp__CFPreferencesCopyMultiple(CFArrayRef keysToFetch, CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);

CFMutableDictionaryRef CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks* keyCallBacks, const CFDictionaryValueCallBacks* valueCallBacks);
CFMutableDictionaryRef _imp__CFDictionaryCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFDictionaryKeyCallBacks* keyCallBacks, const CFDictionaryValueCallBacks* valueCallBacks);
CFMutableDictionaryRef CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict);
CFMutableDictionaryRef _imp__CFDictionaryCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFDictionaryRef theDict);

CFMutableArrayRef CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks* callBacks);
CFMutableArrayRef _imp__CFArrayCreateMutable(CFAllocatorRef allocator, CFIndex capacity, const CFArrayCallBacks* callBacks);
CFMutableArrayRef CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray);
CFMutableArrayRef _imp__CFArrayCreateMutableCopy(CFAllocatorRef allocator, CFIndex capacity, CFArrayRef theArray);

CFArrayRef CFArrayCreate(CFAllocatorRef allocator, const void** values, CFIndex numValues, const CFArrayCallBacks* callBacks);
CFArrayRef _imp__CFArrayCreate(CFAllocatorRef allocator, const void** values, CFIndex numValues, const CFArrayCallBacks* callBacks);
CFArrayRef CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray);
CFArrayRef _imp__CFArrayCreateCopy(CFAllocatorRef allocator, CFArrayRef theArray);
CFArrayRef CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString);
CFArrayRef _imp__CFStringCreateArrayBySeparatingStrings(CFAllocatorRef alloc, CFStringRef theString, CFStringRef separatorString);
CFArrayRef CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
CFArrayRef _imp__CFStringCreateArrayWithFindResults(CFAllocatorRef alloc, CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
CFArrayRef CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
CFArrayRef _imp__CFPreferencesCopyKeyList(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
CFArrayRef CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType);
CFArrayRef _imp__CFBundleCreateBundlesFromDirectory(CFAllocatorRef allocator, CFURLRef directoryURL, CFStringRef bundleType);
CFArrayRef CFBundleGetAllBundles(void);
CFArrayRef _imp__CFBundleGetAllBundles(void);
CFArrayRef CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName);
CFArrayRef _imp__CFBundleCopyResourceURLsOfType(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName);
CFArrayRef CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName);
CFArrayRef _imp__CFBundleCopyResourceURLsOfTypeInDirectory(CFURLRef bundleURL, CFStringRef resourceType, CFStringRef subDirName);
CFArrayRef CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
CFArrayRef _imp__CFBundleCopyResourceURLsOfTypeForLocalization(CFBundleRef bundle, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
CFArrayRef CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray);
CFArrayRef _imp__CFBundleCopyLocalizationsForPreferences(CFArrayRef locArray, CFArrayRef prefArray);
CFArrayRef CFBundleCopyBundleLocalizations(CFBundleRef bundle);
CFArrayRef _imp__CFBundleCopyBundleLocalizations(CFBundleRef bundle);

CFMutableStringRef CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength);
CFMutableStringRef _imp__CFStringCreateMutable(CFAllocatorRef alloc, CFIndex maxLength);
CFMutableStringRef CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString);
CFMutableStringRef _imp__CFStringCreateMutableCopy(CFAllocatorRef alloc, CFIndex maxLength, CFStringRef theString);
CFMutableStringRef CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar* chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);
CFMutableStringRef _imp__CFStringCreateMutableWithExternalCharactersNoCopy(CFAllocatorRef alloc, UniChar* chars, CFIndex numChars, CFIndex capacity, CFAllocatorRef externalCharactersAllocator);

CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char* cStr, CFStringEncoding encoding);
CFStringRef _imp__CFStringCreateWithCString(CFAllocatorRef alloc, const char* cStr, CFStringEncoding encoding);
CFStringRef CFCopyDescription(CFTypeRef cf);
CFStringRef _imp__CFCopyDescription(CFTypeRef cf);
CFStringRef CFCopyTypeIDDescription(CFTypeID type_id);
CFStringRef _imp__CFCopyTypeIDDescription(CFTypeID type_id);
CFStringRef CFErrorCopyFailureReason(CFErrorRef err);
CFStringRef _imp__CFErrorCopyFailureReason(CFErrorRef err);
CFStringRef CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding);
CFStringRef _imp__CFStringCreateWithPascalString(CFAllocatorRef alloc, ConstStr255Param pStr, CFStringEncoding encoding);
CFStringRef CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8* bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
CFStringRef _imp__CFStringCreateWithBytes(CFAllocatorRef alloc, const UInt8* bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation);
CFStringRef CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8* bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator);
CFStringRef _imp__CFStringCreateWithBytesNoCopy(CFAllocatorRef alloc, const UInt8* bytes, CFIndex numBytes, CFStringEncoding encoding, Boolean isExternalRepresentation, CFAllocatorRef contentsDeallocator);
CFStringRef CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString);
CFStringRef _imp__CFStringCreateByCombiningStrings(CFAllocatorRef alloc, CFArrayRef theArray, CFStringRef separatorString);
CFStringRef CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString);
CFStringRef _imp__CFStringCreateCopy(CFAllocatorRef alloc, CFStringRef theString);
CFStringRef CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding);
CFStringRef _imp__CFStringCreateFromExternalRepresentation(CFAllocatorRef alloc, CFDataRef data, CFStringEncoding encoding);
CFStringRef CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar* chars, CFIndex numChars);
CFStringRef _imp__CFStringCreateWithCharacters(CFAllocatorRef alloc, const UniChar* chars, CFIndex numChars);
CFStringRef CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar* chars, CFIndex numChars, CFAllocatorRef contentsDeallocator);
CFStringRef _imp__CFStringCreateWithCharactersNoCopy(CFAllocatorRef alloc, const UniChar* chars, CFIndex numChars, CFAllocatorRef contentsDeallocator);
CFStringRef CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...);
CFStringRef _imp__CFStringCreateWithFormat(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, ...);
CFStringRef CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);
CFStringRef _imp__CFStringCreateWithFormatAndArguments(CFAllocatorRef alloc, CFDictionaryRef formatOptions, CFStringRef format, va_list arguments);
CFStringRef CFStringCreateWithCString(CFAllocatorRef alloc, const char* cStr, CFStringEncoding encoding);
CFStringRef _imp__CFStringCreateWithCString(CFAllocatorRef alloc, const char* cStr, CFStringEncoding encoding);
CFStringRef CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char* cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);
CFStringRef _imp__CFStringCreateWithCStringNoCopy(CFAllocatorRef alloc, const char* cStr, CFStringEncoding encoding, CFAllocatorRef contentsDeallocator);
CFStringRef CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range);
CFStringRef _imp__CFStringCreateWithSubstring(CFAllocatorRef alloc, CFStringRef str, CFRange range);
CFStringRef CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char* buffer);
CFStringRef _imp__CFStringCreateWithFileSystemRepresentation(CFAllocatorRef alloc, const char* buffer);
CFStringRef CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range);
CFStringRef _imp__CFStringTokenizerCopyBestStringLanguage(CFStringRef string, CFRange range);
CFStringRef CFBundleGetIdentifier(CFBundleRef bundle);
CFStringRef _imp__CFBundleGetIdentifier(CFBundleRef bundle);
CFStringRef CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName);
CFStringRef _imp__CFBundleCopyLocalizedString(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName);
CFStringRef CFBundleCopyLocalizedStringForLocalization(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName, CFStringRef localizationName);
CFStringRef _imp__CFBundleCopyLocalizedStringForLocalization(CFBundleRef bundle, CFStringRef key, CFStringRef value, CFStringRef tableName, CFStringRef localizationName);
CFStringRef CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid);
CFStringRef _imp__CFUUIDCreateString(CFAllocatorRef alloc, CFUUIDRef uuid);
CFStringRef CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle);
CFStringRef _imp__CFURLCopyFileSystemPath(CFURLRef anURL, CFURLPathStyle pathStyle);
CFStringRef CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
CFStringRef _imp__CFURLCopyFragment(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
CFStringRef CFURLCopyHostName(CFURLRef anURL);
CFStringRef _imp__CFURLCopyHostName(CFURLRef anURL);
CFStringRef CFURLCopyLastPathComponent(CFURLRef url);
CFStringRef _imp__CFURLCopyLastPathComponent(CFURLRef url);
CFStringRef CFURLCopyNetLocation(CFURLRef anURL);
CFStringRef _imp__CFURLCopyNetLocation(CFURLRef anURL);
CFStringRef CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
CFStringRef _imp__CFURLCopyParameterString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
CFStringRef CFURLCopyPassword(CFURLRef anURL);
CFStringRef _imp__CFURLCopyPassword(CFURLRef anURL);
CFStringRef CFURLCopyPath(CFURLRef anURL);
CFStringRef _imp__CFURLCopyPath(CFURLRef anURL);
CFStringRef CFURLCopyPathExtension(CFURLRef url);
CFStringRef _imp__CFURLCopyPathExtension(CFURLRef url);
CFStringRef CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
CFStringRef _imp__CFURLCopyQueryString(CFURLRef anURL, CFStringRef charactersToLeaveEscaped);
CFStringRef CFURLCopyResourceSpecifier(CFURLRef anURL);
CFStringRef _imp__CFURLCopyResourceSpecifier(CFURLRef anURL);
CFStringRef CFURLCopyScheme(CFURLRef anURL);
CFStringRef _imp__CFURLCopyScheme(CFURLRef anURL);
CFStringRef CFURLCopyUserName(CFURLRef anURL);
CFStringRef _imp__CFURLCopyUserName(CFURLRef anURL);
CFStringRef CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped);
CFStringRef _imp__CFURLCreateStringByReplacingPercentEscapes(CFAllocatorRef allocator, CFStringRef originalString, CFStringRef charactersToLeaveEscaped);
CFStringRef CFURLGetString(CFURLRef anURL);
CFStringRef _imp__CFURLGetString(CFURLRef anURL);

CFStringRef _CFGetProductName(void);
CFStringRef _imp___CFGetProductName(void);

CFBundleRef CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL);
CFBundleRef _imp__CFBundleCreate(CFAllocatorRef allocator, CFURLRef bundleURL);
CFBundleRef CFBundleGetBundleWithIdentifier(CFStringRef bundleID);
CFBundleRef _imp__CFBundleGetBundleWithIdentifier(CFStringRef bundleID);
CFBundleRef CFBundleGetMainBundle(void);
CFBundleRef _imp__CFBundleGetMainBundle(void);

CFURLRef CFBundleCopyBundleURL(CFBundleRef bundle);
CFURLRef _imp__CFBundleCopyBundleURL(CFBundleRef bundle);
CFURLRef CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle);
CFURLRef _imp__CFBundleCopyResourcesDirectoryURL(CFBundleRef bundle);
CFURLRef CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);
CFURLRef _imp__CFBundleCopyResourceURL(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);
CFURLRef CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);
CFURLRef _imp__CFBundleCopyResourceURLInDirectory(CFURLRef bundleURL, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName);
CFURLRef CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
CFURLRef _imp__CFBundleCopyResourceURLForLocalization(CFBundleRef bundle, CFStringRef resourceName, CFStringRef resourceType, CFStringRef subDirName, CFStringRef localizationName);
CFURLRef CFURLGetBaseURL(CFURLRef anURL);
CFURLRef _imp__CFURLGetBaseURL(CFURLRef anURL);

Boolean CFEqual(CFTypeRef cf1, CFTypeRef cf2);
Boolean _imp__CFEqual(CFTypeRef cf1, CFTypeRef cf2);
Boolean CFBooleanGetValue(CFBooleanRef boolean);
Boolean _imp__CFBooleanGetValue(CFBooleanRef boolean);
Boolean CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void* value);
Boolean _imp__CFArrayContainsValue(CFArrayRef theArray, CFRange range, const void* value);
Boolean CFPreferencesAppSynchronize(CFStringRef appID);
Boolean _imp__CFPreferencesAppSynchronize(CFStringRef appID);
Boolean CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID);
Boolean _imp__CFPreferencesAppValueIsForced(CFStringRef key, CFStringRef applicationID);
Boolean CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean* keyExistsAndHasValidFormat);
Boolean _imp__CFPreferencesGetAppBooleanValue(CFStringRef key, CFStringRef applicationID, Boolean* keyExistsAndHasValidFormat);
Boolean CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
Boolean _imp__CFPreferencesSynchronize(CFStringRef applicationID, CFStringRef userName, CFStringRef hostName);
Boolean CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet, CFIndex thePlane);
Boolean _imp__CFCharacterSetHasMemberInPlane(CFCharacterSetRef theSet, CFIndex thePlane);
Boolean CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar);
Boolean _imp__CFCharacterSetIsCharacterMember(CFCharacterSetRef theSet, UniChar theChar);
Boolean CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar);
Boolean _imp__CFCharacterSetIsLongCharacterMember(CFCharacterSetRef theSet, UTF32Char theChar);
Boolean CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset);
Boolean _imp__CFCharacterSetIsSupersetOfSet(CFCharacterSetRef theSet, CFCharacterSetRef theOtherset);
Boolean CFDictionaryContainsKey(CFDictionaryRef theDict, const void* key);
Boolean _imp__CFDictionaryContainsKey(CFDictionaryRef theDict, const void* key);
Boolean CFDictionaryContainsValue(CFDictionaryRef theDict, const void* value);
Boolean _imp__CFDictionaryContainsValue(CFDictionaryRef theDict, const void* value);
Boolean CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void* key, const void** value);
Boolean _imp__CFDictionaryGetValueIfPresent(CFDictionaryRef theDict, const void* key, const void** value);
Boolean CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange* result);
Boolean _imp__CFStringFindCharacterFromSet(CFStringRef theString, CFCharacterSetRef theSet, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange* result);
Boolean CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange* result);
Boolean _imp__CFStringFindWithOptions(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFRange* result);
Boolean CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange* result);
Boolean _imp__CFStringFindWithOptionsAndLocale(CFStringRef theString, CFStringRef stringToFind, CFRange rangeToSearch, CFStringCompareFlags searchOptions, CFLocaleRef locale, CFRange* result);
Boolean CFStringHasPrefix(CFStringRef theString, CFStringRef prefix);
Boolean _imp__CFStringHasPrefix(CFStringRef theString, CFStringRef prefix);
Boolean CFStringHasSuffix(CFStringRef theString, CFStringRef suffix);
Boolean _imp__CFStringHasSuffix(CFStringRef theString, CFStringRef suffix);
Boolean CFStringTransform(CFMutableStringRef string, CFRange* range, CFStringRef transform, Boolean reverse);
Boolean _imp__CFStringTransform(CFMutableStringRef string, CFRange* range, CFStringRef transform, Boolean reverse);
Boolean CFStringGetCString(CFStringRef theString, char* buffer, CFIndex bufferSize, CFStringEncoding encoding);
Boolean _imp__CFStringGetCString(CFStringRef theString, char* buffer, CFIndex bufferSize, CFStringEncoding encoding);
Boolean CFStringGetFileSystemRepresentation(CFStringRef string, char* buffer, CFIndex maxBufLen);
Boolean _imp__CFStringGetFileSystemRepresentation(CFStringRef string, char* buffer, CFIndex maxBufLen);
Boolean CFNumberGetValue(CFNumberRef number, CFNumberType theType, void* valuePtr);
Boolean _imp__CFNumberGetValue(CFNumberRef number, CFNumberType theType, void* valuePtr);
Boolean CFNumberIsFloatType(CFNumberRef number);
Boolean _imp__CFNumberIsFloatType(CFNumberRef number);
Boolean CFSetContainsValue(CFSetRef theSet, const void* value);
Boolean _imp__CFSetContainsValue(CFSetRef theSet, const void* value);
Boolean CFSetGetValueIfPresent(CFSetRef theSet, const void* candidate, const void** value);
Boolean _imp__CFSetGetValueIfPresent(CFSetRef theSet, const void* candidate, const void** value);
Boolean CFReadStreamOpen(CFReadStreamRef stream);
Boolean _imp__CFReadStreamOpen(CFReadStreamRef stream);
Boolean CFReadStreamHasBytesAvailable(CFReadStreamRef stream);
Boolean _imp__CFReadStreamHasBytesAvailable(CFReadStreamRef stream);
Boolean CFWriteStreamOpen(CFWriteStreamRef stream);
Boolean _imp__CFWriteStreamOpen(CFWriteStreamRef stream);
Boolean CFURLCanBeDecomposed(CFURLRef anURL);
Boolean _imp__CFURLCanBeDecomposed(CFURLRef anURL);
Boolean CFURLHasDirectoryPath(CFURLRef anURL);
Boolean _imp__CFURLHasDirectoryPath(CFURLRef anURL);
Boolean CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8* buffer, CFIndex maxBufLen);
Boolean _imp__CFURLGetFileSystemRepresentation(CFURLRef url, Boolean resolveAgainstBase, UInt8* buffer, CFIndex maxBufLen);
Boolean CFURLResourceIsReachable(CFURLRef url, CFErrorRef* error);
Boolean _imp__CFURLResourceIsReachable(CFURLRef url, CFErrorRef* error);

Boolean _CFExecutableLinkedOnOrAfter(CFSystemVersion version);
Boolean _imp___CFExecutableLinkedOnOrAfter(CFSystemVersion version);
Boolean _CFIsDeallocating(CFTypeRef);
Boolean _imp___CFIsDeallocating(CFTypeRef);
Boolean _CFIsObjC(CFTypeID typeID, CFTypeRef obj);
Boolean _imp___CFIsObjC(CFTypeID typeID, CFTypeRef obj);
Boolean _CFNonObjCEqual(CFTypeRef cf1, CFTypeRef cf2);
Boolean _imp___CFNonObjCEqual(CFTypeRef cf1, CFTypeRef cf2);

CFIndex CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void* value);
CFIndex _imp__CFArrayGetFirstIndexOfValue(CFArrayRef theArray, CFRange range, const void* value);
CFIndex CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void* value);
CFIndex _imp__CFArrayGetLastIndexOfValue(CFArrayRef theArray, CFRange range, const void* value);
CFIndex CFArrayGetCount(CFArrayRef theArray);
CFIndex _imp__CFArrayGetCount(CFArrayRef theArray);
CFIndex CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void* value, CFComparatorFunction comparator, void* context);
CFIndex _imp__CFArrayBSearchValues(CFArrayRef theArray, CFRange range, const void* value, CFComparatorFunction comparator, void* context);
CFIndex CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean* keyExistsAndHasValidFormat);
CFIndex _imp__CFPreferencesGetAppIntegerValue(CFStringRef key, CFStringRef applicationID, Boolean* keyExistsAndHasValidFormat);
CFIndex CFDataGetLength(CFDataRef theData);
CFIndex _imp__CFDataGetLength(CFDataRef theData);
CFIndex CFDictionaryGetCount(CFDictionaryRef theDict);
CFIndex _imp__CFDictionaryGetCount(CFDictionaryRef theDict);
CFIndex CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void* key);
CFIndex _imp__CFDictionaryGetCountOfKey(CFDictionaryRef theDict, const void* key);
CFIndex CFDictionaryGetCountOfValue(CFDictionaryRef theDict, const void* value);
CFIndex _imp__CFDictionaryGetCountOfValue(CFDictionaryRef theDict, const void* value);
CFIndex CFGetRetainCount(CFTypeRef cf);
CFIndex _imp__CFGetRetainCount(CFTypeRef cf);
CFIndex CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
CFIndex _imp__CFStringFindAndReplace(CFMutableStringRef theString, CFStringRef stringToFind, CFStringRef replacementString, CFRange rangeToSearch, CFStringCompareFlags compareOptions);
CFIndex CFStringGetLength(CFStringRef theString);
CFIndex _imp__CFStringGetLength(CFStringRef theString);
CFIndex CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8* buffer, CFIndex maxBufLen, CFIndex* usedBufLen);
CFIndex _imp__CFStringGetBytes(CFStringRef theString, CFRange range, CFStringEncoding encoding, UInt8 lossByte, Boolean isExternalRepresentation, UInt8* buffer, CFIndex maxBufLen, CFIndex* usedBufLen);
CFIndex CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding);
CFIndex _imp__CFStringGetMaximumSizeForEncoding(CFIndex length, CFStringEncoding encoding);
CFIndex CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string);
CFIndex _imp__CFStringGetMaximumSizeOfFileSystemRepresentation(CFStringRef string);
CFIndex CFNumberGetByteSize(CFNumberRef number);
CFIndex _imp__CFNumberGetByteSize(CFNumberRef number);
CFIndex CFSetGetCount(CFSetRef theSet);
CFIndex _imp__CFSetGetCount(CFSetRef theSet);
CFIndex CFReadStreamRead(CFReadStreamRef stream, UInt8* buffer, CFIndex bufferLength);
CFIndex _imp__CFReadStreamRead(CFReadStreamRef stream, UInt8* buffer, CFIndex bufferLength);
CFIndex CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8* buffer, CFIndex bufferLength);
CFIndex _imp__CFWriteStreamWrite(CFWriteStreamRef stream, const UInt8* buffer, CFIndex bufferLength);
CFIndex CFErrorGetCode(CFErrorRef err);
CFIndex _imp__CFErrorGetCode(CFErrorRef err);
CFIndex CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
CFIndex _imp__CFAllocatorGetPreferredSizeForSize(CFAllocatorRef allocator, CFIndex size, CFOptionFlags hint);
CFIndex CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef* error);
CFIndex _imp__CFPropertyListWrite(CFPropertyListRef propertyList, CFWriteStreamRef stream, CFPropertyListFormat format, CFOptionFlags options, CFErrorRef* error);
CFIndex CFURLGetBytes(CFURLRef url, UInt8* buffer, CFIndex bufferLength);
CFIndex _imp__CFURLGetBytes(CFURLRef url, UInt8* buffer, CFIndex bufferLength);